#ifdef WIN32
#include "windows.h"
#define PERFORCE_EXPORT __declspec(dllexport)
#else
#define PERFORCE_EXPORT
#endif /*WIN32*/

#include <stdio.h>

#include "swarm.h"

#include "node.h"
#include "expr.h"
#include "context.h"
#include "exceptions.h"
#include "hashtable.h"


#define SWARM_SETTESTSTATUS_NAME "swarm_setteststatus"


void SendDataToSocket(int sock, const char *data, long len)
{
	long bytesRemaining = len;

	while(bytesRemaining > 0)
	{
        int bytesSent = send(sock, data, bytesRemaining, 0);
        if(bytesSent == 0)
        {
			return;
        }
        else if(bytesSent == -1)
        {
            perror("Failed to send");
			return;
        }

		data += bytesSent;
		bytesRemaining -= bytesSent;
	}
}


bool ReadDataFromSocket(int sock, char *dataPtr, long length)
{
	// Reads "length" bytes of data from the socket.
	// If less than "Length" bytes are read then loop.
	//
	long		BytesRead=0;
	char 		*xPtr;
	long		BytesToRead;
	bool		res=true;

	xPtr=(char *)dataPtr;
	BytesToRead=length;
	bool BytesRemaining=true;
	while (BytesRemaining)
	{
		BytesRead=recv(sock,xPtr,BytesToRead,0);
		if (BytesRead == -1)
		{
			// ShowErrorMessage("Failed to read from socket");
			BytesRemaining=false;
			res=false;
			break;
		}
		if (BytesRead == 0)
		{
			// Server has closed connection.
			// ShowErrorMessage("Server has closed connection");
			BytesRemaining=false;
			res=false;
			break;
		}
		if (BytesRead<BytesToRead)
		{
			BytesToRead=BytesToRead-BytesRead;
			xPtr=xPtr+BytesRead;
		}
		else
		{
			BytesRemaining=false;
		}
	}
	return res;
}


char *ReadLineFromSocket(int sock)
{
	char Reply[1024];
	int n;

	Reply[0] = '\0';

	// Read up to CR-LF
	char ch;
	int t=0;
	do
	{
		n = recv(sock,&ch,1,0);

		if(n==0)
		{
			// Connection has been closed
			ch='\0';
		}
		else if(n==1)
		{
			if (ch=='\n' || t>=(sizeof(Reply)-1)) ch='\0';
			if (ch!='\r') Reply[t++]=ch;
		}
		else
		{
#ifdef _DEBUG
			// RHT 15/07/2008 - try and figure out why we landed here!
				if (n == SOCKET_ERROR)
				{
					LPVOID lpMsgBuf;
					FormatMessage( 
						FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
						NULL, WSAGetLastError(), MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), // Default language
						(LPTSTR) &lpMsgBuf, 0, NULL  );
					debug0("WSAGetLastError reports %s", (LPCTSTR)lpMsgBuf);
					LocalFree( lpMsgBuf );
				}
				else
				{
					printf("n = %d\n", n);
				}
#endif /* _DEBUG*/
			break;	// recv failed
		}
	} while((int) ch);

	return strdup(Reply);
}


int DoHttpRequest(const char *hostname, int port, const char *uri,	// where
			  const char *params, bool isPost, const char *host, StringHashtable **cookieJar,	// content
			  int *status, char **contentType, char **content)	// return
{
	int	sock;
	int	res;

	struct hostent *hp = gethostbyname(hostname);
	if(!hp)
	{
		// gethostbyname fails	
		errno = h_errno;
		return -1;
	}
	else
	{
		// Create a socket on which to send.
		sock = socket(AF_INET, SOCK_STREAM, 0);

		struct sockaddr_in	name;
		name.sin_family = AF_INET;
		name.sin_addr.s_addr = *((int *)hp->h_addr);
		name.sin_port = htons(port);

//printf("Connecting to %d.%d.%d.%d:%d...\n",
//	   name.sin_addr.S_un.S_un_b.s_b1, name.sin_addr.S_un.S_un_b.s_b2,
//	   name.sin_addr.S_un.S_un_b.s_b3, name.sin_addr.S_un.S_un_b.s_b4, port);
		res = connect(sock,(struct sockaddr*) &name, sizeof(name));
		if(res)
		{
			// Connection failure
			errno = WSAGetLastError();
			return -2;
		}
	}

	OutputStream request(false);	// auto-newline off
	if(!isPost && params) {
		// Params go on the uri for GET
		request.writeToStdOut("GET %s?%s HTTP/1.0\r\n", uri, params);
	} else {
		// Either no params or using POST
		request.writeToStdOut("%s %s HTTP/1.0\r\n", (isPost ? "POST" : "GET"), uri);
	}
	if(host) {
		// Optional host header - user for sending requests to name-based virtual hosts
		request.writeToStdOut("Host: %s\r\n", host);
	}
	if(*cookieJar) {
		// Add cookies from the cookie jar hashtable
		char *cookies = (char*) malloc(1);
		*cookies = '\0';
		AutoPtr<StringList> keys = (*cookieJar)->keys();
		StringListIterator iter(*keys);
		for(const char *key = iter.first(); key; key = iter.next()) {
			const char *val = (*cookieJar)->get(key);
			debug0("Setting cookie: '%s' = '%s'", key, val);
			cookies = (char*) realloc(cookies, strlen(cookies) + strlen(key) + strlen(val) + 4);
			if(*cookies) {
				sprintf(cookies, "%s; %s=%s", cookies, key, val);
			} else {
				sprintf(cookies, "%s=%s", key, val);
			}
		}
		request.writeToStdOut("Cookie: %s\r\n", cookies);
	}
	if(isPost) {
		request.writeToStdOut("Content-Type: application/x-www-form-urlencoded\r\n");
		request.writeToStdOut("Content-Length: %d\r\n", (params ? strlen(params) : 0));
	}
	request.writeToStdOut("\r\n");		// End of header
	if(isPost && params) {
		request.writeToStdOut("%s", params);
	}

	debug0("Request: %s", request.buffer());

	SendDataToSocket(sock, request.buffer(), request.size());

	char *line = ReadLineFromSocket(sock);
	debug0("line = %s", line);

	if(strncmp(line, "HTTP/1.", 7) != 0) {
		closesocket(sock);
		return -3; // Not HTTP
	}

	*status = atoi(&line[9]);
	debug0("Status: %d", *status);

	long length = -1;

	while(true) {
		line = ReadLineFromSocket(sock);
		debug0("line = %s", line);

		if(!*line) break;

		if(strncmp(line, "Content-Length: ", 15) == 0) {
			length = atol(&line[15]);
		} else if(strncmp(line, "Content-Type: ", 13) == 0) {
			*contentType = strdup(&line[15]);
		} else if(strncmp(line, "Set-Cookie: ", 11) == 0) {
			if(!*cookieJar) {
				*cookieJar = new StringHashtable();
			}
			char *cookie = &line[11];
			if(*cookie == ' ') {
				cookie++;
			}
			char *eq = strchr(cookie, '=');
			if(eq) {
				char *sc = strchr(eq, ';');
				if(sc) {
					*sc = '\0';
				}
				*eq = '\0';
				debug0("Storing cookie: '%s' = '%s'", cookie, &eq[1]);
				(*cookieJar)->put(cookie, &eq[1]);
			}
		}
	}
	debug0("Length: %d", length);

	if(length > 0) {
		char *data = (char*) malloc(length + 1);
		if(ReadDataFromSocket(sock, data, length)) {
			debug0("Data: %s", data);
			data[length] = '\0';
			*content = data;
		}
	}

	closesocket(sock);

	return 0;
}


///////////////////////////////////////////////////////////////////////////////
// Swarm_SetTestStatusStmtImpl
///////////////////////////////////////////////////////////////////////////////

Swarm_SetTestStatusStmtImpl::Swarm_SetTestStatusStmtImpl(ExtendedStmt &parent)
	: m_parent(parent)
{}


void Swarm_SetTestStatusStmtImpl::execute(class Context &ctx)
{
	ConstCharPtr server  = m_parent.getArgAsString("server", ctx);
	ConstCharPtr review  = m_parent.getArgAsString("review", ctx);
	ExprPtr epass	     = m_parent.getArg("pass", ctx);

	if(!server) {
		throw RuntimeError(m_parent, ctx.stack(), "server must be specified");
	}
	if(!review) {
		throw RuntimeError(m_parent, ctx.stack(), "review must be specified");
	}
	if(!epass) {
		throw RuntimeError(m_parent, ctx.stack(), "pass must be specified");
	}

	bool pass = epass->toBool();

	int httpStatus = 0;
	char *contentType = NULL;
	char *content = NULL;
	StringHashtable *cookieJar = NULL;

	//CharPtr uri = (char*) malloc(strlen(review) + 25);
	//sprintf(uri, "/reviews/%s/tests/%s", (const char*) review, (pass ? "pass" : "fail"));
	const char *uri = "/comments/add";
	const char *params = "topic=reviews/15&context={\"reviews\":15}&user=Robert&body=Hello%20World%20from%20DM2";

	// Login to Swarm
	if(DoHttpRequest(server, 80, "/login", "user=Robert&password=perforce", true, NULL, &cookieJar, &httpStatus, &contentType, &content) != 0) {
		throw RuntimeError(m_parent, ctx.stack(), "Failed to send request to '%s'", (const char*) server);
	}

	// Issue the update
	if(DoHttpRequest(server, 80, uri, params, true, NULL, &cookieJar, &httpStatus, &contentType, &content) != 0) {
		throw RuntimeError(m_parent, ctx.stack(), "Failed to send request to '%s'", (const char*) server);
	}

	if((httpStatus < 200) || (httpStatus > 299)) {
		throw RuntimeError(m_parent, ctx.stack(), "Server '%s' returned status %d", (const char*) server, httpStatus);
	}

	SAFE_FREE(contentType);
	SAFE_FREE(content);
}


///////////////////////////////////////////////////////////////////////////////
// Swarm_SetTestStatusStmtImplFactory
///////////////////////////////////////////////////////////////////////////////

Swarm_SetTestStatusStmtImplFactory::Swarm_SetTestStatusStmtImplFactory()
{}


ExtendedStmtImpl *Swarm_SetTestStatusStmtImplFactory::create(class DM &dm, ExtendedStmt &parent)
{
	return new Swarm_SetTestStatusStmtImpl(parent);
}


///////////////////////////////////////////////////////////////////////////////

extern "C" PERFORCE_EXPORT int Swarm_PluginStart(DM &dm)
{
	//dm.writeToLogFile("Perforce plugin V" PERFORCE_PLUGIN_VERSION);

	ExtendedStmtImplRegistry::instance()
		.registerFactory(SWARM_SETTESTSTATUS_NAME, new Swarm_SetTestStatusStmtImplFactory());
	return 0;
}


extern "C" PERFORCE_EXPORT int Swarm_PluginInstall(DM &dm)
{
	return 0;
}

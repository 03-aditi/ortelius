#
# rto.conf - Harvest Remote Transport Option Configuration File
# (c) 2006 CA
#
# This file controls the basic operations of RTO. Directives can be either
# stand-alone (in which case they apply system-wide) or they can form part of
# a rule. A rule is identified as follows:
#
# RULE NAME:
#   RuleDirective=Value
#   RuleDirective=value
#
# A blank line ends the directives for the specified rule. Rules can be either
# specified by clients or they can be enforced by membership of particular
# Harvest User Groups.
#
# The "DEFAULT" rule is used by RTO when no other rule has been specified
# by a client.
#
# GLOBAL DIRECTIVES:
# ------------------
# Port=<port num>
#   The port number on which to listen for incoming connections
#
# LogFile=<file path>
#   The file to which logging information should be written.
#
# FTPLogging=on|yes|off|no
#   Whether or not to log FTP traffic to remote servers. This can
#   be useful in problem resolution.
#
# SFTPLogging=on|yes|off|no
#   Whether or not to log SFTP traffic to remote servers. This can
#   be useful in problem resolution.
#
# FTPLogFile=<file path>
#   The name of the file to receive FTP logging information, should
#   FTPLogging be set to YES.
#
# SFTPLogFile=<file path>
#   The name of the file to receive SFTP logging information should
#   SFTPLogging be set to YES
#
# RULE DIRECTIVES:
# ----------------
# FTP_Allowed=Yes|No
#   Whether FTP is allowed as a transport protocol. If this is set
#   to "No" then a user cannot specify FTP as a protocol when attempting
#   to set up a new remote server end-point.
#
# SFTP_Allowed=Yes|No
#   Whether SFTP is allowed as a transport protocol. If this is set
#   to "No" then a user cannot specify SFTP as a protocol when attempting
#   to set up a new remote server end-point.
#
# ftp_checkout=direct|indirect
#   FTP Checkouts can be pushed "directly" to the target server (having been
#   read straight from the Harvest Database) or they can be checked out to a
#   temporary "dropzone" on the Harvest Server before transfer. The second
#   approach is necessary if one needs to create and transfer a harvest
#   signature file for subsequent footprinting and/or synchronised checkouts.
#   The former is preferable for performance.
#
# SCRIPTING
# ---------
# You can set rules up within RTO to invoke scripts at differing points in
# the check-in or check-out process. These scripts run on the server where
# the RTO server is running. Environment variables are set to reflect the
# context in which the check-in or check-out is operating. See "Environment
# Variables" below for more information.
#
# CheckOut Scripts
# ----------------
# PreCheckoutScript=<script path>
#   Specifies a script to run before the check-out process starts. If this
#   script exits with a non-zero exit code, then any standard error from
#   the script is directed to the RTO Client and the checkout is abandoned.
#
# PreTransferToClientScript=<script path>
#   This script only operates in SFTP mode or in FTP "indirect" mode. It
#   is invoked AFTER the versions have been checked out to the server-side
#   dropzone but BEFORE those files are transferred to the target. If this
#   script exits with a non-zero exit code, then any standard error from
#   the script is directed to the RTO Client and the checkout is abandoned.
#
# PostTransferToClientScript=<script path>
#   This script runs after the versions have been transferred to the target.
#   Any standard error is routed back to the client for display but the exit
#   code is ignored.
#   
# CheckIn Scripts
# ---------------
# PreTransferFromclientScript=<script path>
#   Specifies a script to run before the check-in process starts. If this 
#   script exits with a non-zero exit code, then any standard error from
#   the script is directed to the RTO Client and the checkin is abandoned.
#
# PostTransferFromClientScript=<script path>
#   This script runs AFTER all the files have been transferred to the server-
#   side dropzone but BEFORE those files are checked in to the Harvest
#   Repository. If this script exits with a non-zero exit code, then any
#   standard error from the script is directed to the RTO Client and the
#   checkin is abandoned.
#
# PostCheckInScript=<script path>
#   This script runs after the files have been checked into the Harvest Repository.
#   Any standard error is routed back to the client for display but the exit
#   code is ignored.
#
# ENVIRONMENT VARIABLES
# ---------------------
# The following environment variables are available to all the above scripts.
#   RTO_VIEWPATH             The viewpath of the Harvest Repository
#   RTO_PACKAGE              The packagename
#   RTO_DROPZONE             The pathname of the RTO dropzone on the Harvest Server
#   RTO_TARGETNODE           The target machine name
#   RTO_REMOTEUSER           The username being used on the remote node
#   RTO_TARGETPATH           The directory path used on the target server
#   RTO_PROTOCOL             Either FTP or SFTP dependent on protocol
#   RTO_PROJECT              The Harvest Project Name
#   RTO_STATE                The Harvest State Name within the Project
#   RTO_LINE_END_FORMAT      Either UNIX, WINDOWS or NONE (SFTP mode)
#   RTO_USER                 THe Harvest User invoking the RTO process
#

Server = localhost
Port = 2303
LogFile=$RTOHOME/log/rtoserver$YYYY$MM$DD.log
FTPLogging=on
SFTPLogging=on
FTPLogFile=$RTOHOME/log/ftp$YYYY$MM$DD.log
SFTPLogFile=$RTOHOME/log/sftp$YYYY$MM$DD.log

Default:
	FTP_Allowed=No
	SFTP_Allowed=Yes
	DefaultCheckOutMode=Browse
	DefaultPathOption=PreserveAndCreate 
	ftp_checkout=direct

#Rule1:
#	FTP_Allowed=Yes
#	SFTP_Allowed=Yes
#	ftp_checkout=indirect

# Example YAML to get you started quickly.
# Be aware that YAML has indentation based scoping.
# Code completion support is available so start typing for available options.
swagger: '2.0'

# This is your document metadata
info:
  version: "7.7.0"
  title: DeployHub RESTful API
  description: |
    # Object Accessibility
   
    The objects that are accessible via the API are restricted based on the logged-in user. Only objects that are contained within the user's home domain and any sub-domains are accessible via the API (just as they would be through the graphical web interface).

    If a requested object does not have "read" permission then it cannot be accessed via the API. Similarly, attempting to modify objects which do not have the appropriate "change" permission is also prohibited. In such cases, the "success" flag returned is "false" and the error is "Permission Denied".
    
    # Logging in to Establishing a Connection to DeployHub

      When issuing calls to the API, the client application must either first issue a "login" call, specifying the username and password or must specify the username and password in each individual call to the API.


    #	Qualify the Name of the Object
    
    When specifying an object by name you can always qualify the name by prepending it with the name of the domain in which it is contained. The name of the domain should be separated from the name of the object by a period.

    ## Example

        Development.demoenv

      This specifies that the "demoenv" environment required can be found in the "Development" domain.

      Of course, the "Development" domain itself may not be uniquely named- especially if multiple teams are using sub-domains to create lifecycles. In this case, even Development.demoenv could be ambiguous. To work around this, you can specify as many parent domains as are necessary to uniquely identify the object.

    ## Example

        USA.Development.demoenv

    This specifies that the "demoenv" environment required can be found in the "Development" sub-domain of domain "USA".

    # Use the object's internal ID
    
    Every object in DeployHub has a unique ID. This is used internally in the DeployHub database as a primary/foreign key. An object is given an ID when it is first created and that ID never changes or is re-used, even if the object itself is deleted. Therefore, if you know the ID of the object you can specify that in the API and RE will know which to object you're referring to, even if the name is not unique.

    The query tools in the DeployHub API generally return the object's internal ID as well as its name. Once you know the ID you can use it in subsequent calls to the API.

    To use the ID, just place it where you would normally place the object's name. DeployHub will assume you're specifying an ID if the name given is fully-numeric.
    
    *Do not create objects with fully numeric names - DeployHub will not be able to determine if this is an object id or the object name.*
    
    # Using cURL to access the API	

      Here is an example of how to use cURL to access the DeployHub API. 

      First, we need to login. This operation will return a session ID. We use cURL's --cookie-jar option to store this session ID in the file C:\temp\session.txt

        curl --data "user=omadmin&pass=ompassword" --cookie-jar c:\temp\session.txt http://mac:8080/dmadminweb/API/login

      If the username/password combination is correct, the user is logged in and the success indication is returned.

      The JSESSIONID is stored in the cookie which is stored in the file C:\temp\session.txt

      Now, we can call any of the other API interfaces by specifying the same file in which we stored the session ID returned from the login call. For example, this will return a JSON array containing all the servers in our home and sub-domains to which we have view access

        curl --data "all=Y" --cookie c:\temp\session.txt http://mac:8080/dmadminweb/API/servers


# Describe your paths here
paths:
  # This is a path endpoint. Change it.
  /dmadminweb/API/login:
    # This is a HTTP operation
    get:
      # Describe this verb here. Note: you can use markdown
      summary: Login
      description: |
        When issuing calls to the API, the client application must either first issue a "login" call, specifying the username and password or must specify the username and password in each individual call to the API.
        
        When calling the DeployHub API from inside DMScript (the DeployHub built-in scripting language), the JSESSIONID value for the logged-in user is available via a global variable ($JSESSIONID). This can be used to allow DMScript to call the DeployHub API without the need for an explicit second login. See the DMScript user guide for more information.
      # This is array of GET operation parameters:
      parameters:
        # An example parameter that is in query and is required
        - name: user
          in: query
          description: User Id
          required: true
          type: string
        - name: pass
          in: query
          description: Password for User
          required: true
          type: string
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             The result will include a JSESSIONID cookie. Include this in subsequent calls to the API.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 												
            

  /dmadminweb/API/environments:
    # This is a HTTP operation
    get:
      summary: List Environments
      # Describe this verb here. Note: you can use markdown
      description: |
        This call returns an array of JSON objects representing each environment to
        which the logged-in user has access.
        
        If the all parameter is not specified then only the environments associated with the user's home domain are listed. If the all parameter is specified and is set to "y" then the result includes the environments included in any accessible sub- domains.
      # This is array of GET operation parameters:
      parameters:
        # An example parameter that is in query and is required
        - name: all
          in: query
          description: y or n
          required: false
          type: string
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/environments_result'
          examples:
            application/json:
              {
                "success": true,
	              "result": [
		            {
			            "domain": "GLOBAL",
		            	"id": 2,
		            	"name": "tempenv",
			            "owneruser": "admin",
			            "summary": "temporary for testing",
			            "applications": [
			          	{
					          "completed": "",
					          "deploymentid": 0,
					          "exitcode": 0,
					          "id": 118,
					          "name": "AS400App",
					          "predecessorid": 0,
				          	"versionid": 119,
					          "versionname": "AS400App;1"
				           }
			            ]
		             }
	              ]
	           }

  /dmadminweb/API/environment/{identifier}:
    # This is a HTTP operation
    get:
      summary: Retrieve specific environment
      # Describe this verb here. Note: you can use markdown
      description: |
        This call returns a JSON object representing the specified environment.

      # This is array of GET operation parameters:
      parameters:
        - name: identifier
          in: path
          description: Is the identifier of the environment. Either its name, its qualified name i.e. with its parent domains included in dot notations or its internal ID.
          required: true
          type: string
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/environment_result'
          examples:
            application/json:
              {
	"success": true,
	"result": {
		"domain": "FIS.Dev",
		"id": 16,
		"name": "DevEnv1",
		"owneruser": "admin",
		"summary": "",
		"applications": [
			{
				"completed": "",
				"deploymentid": 1069,
				"exitcode": 0,
				"id": 161,
				"name": "FISApp",
				"predecessorid": 163,
				"versionid": 164,
				"versionname": "FISApp;3"
			}
		]
	}
}            
	       
  /dmadminweb/API/applications:
    # This is a HTTP operation
    get:
      # Describe this verb here. Note: you can use markdown
      summary: List Applications
      description: |
        This call returns an array of JSON objects representing each application to which the logged-in user has access.
        
        If the all parameter is not specified then only the applications associated with the user's home domain are listed. If the all parameter is specified and is set to "y" then the result includes the applications included in any accessible sub-domains.
      # This is array of GET operation parameters:
      parameters:
        # An example parameter that is in query and is required
        - name: all
          in: query
          description: y or n
          required: false
          type: string
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/applications_result'
          examples:
            application/json:
              {
	"success": true,
	"result": [
		{
			"domain": "GLOBAL.FIS",
			"id": 167,
			"name": "Application167",
			"owneruser": "admin",
			"parentid": 0,
			"predecessorid": 0,
			"summary": ""
		}
	]
}

	 
  /dmadminweb/API/application/{identifier}:
    # This is a HTTP operation
    get:
      # Describe this verb here. Note: you can use markdown
      summary: Retrieve specific application or application version
      description: |
        This call returns a JSON object representing the specified application.

        Note, the resulting JSON will vary slightly depending on whether the specified application is a BASE application or an application version.
      # This is array of GET operation parameters:
      parameters:
        - name: latest
          in: query
          description: If latest is set to Y then the latest version of the application is returned.  To use this flag, the specified identifier must refer to a BASE application, otherwise the flag has no effect.
          required: false
          type: string
        - name: branch
          in: query
          description: If branch is set along with latest then the latest version on the specified branch name is returned.
          required: true
          type: string
        - name: identifier
          in: path
          description: Is the identifier of the application. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/application_version_result'
          examples:
            application/json:
              {
	"success": true,
	"result": {
		"domain": "FIS.Dev",
		"id": 16,
		"name": "DevEnv1",
		"owneruser": "admin",
		"summary": "",
		"applications": [
			{
				"completed": "",
				"deploymentid": 1069,
				"exitcode": 0,
				"id": 161,
				"name": "FISApp",
				"predecessorid": 163,
				"versionid": 164,
				"versionname": "FISApp;3"
			}
		]
	}
}            
	
  /dmadminweb/API/servers:
    # This is a HTTP operation
    get:
      # Describe this verb here. Note: you can use markdown
      summary: List All Accessible Servers
      description: |
        This call returns an array of JSON objects representing each application to which the logged-in user has access.
        
        If the all parameter is not specified then only the applications associated with the user's home domain are listed. If the all parameter is specified and is set to "y" then the result includes the applications included in any accessible sub-domains.
      # This is array of GET operation parameters:
      parameters:
        # An example parameter that is in query and is required
        - name: all
          in: query
          description: y or n
          required: false
          type: string
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/servers_result'
          examples:
            application/json:
              {
	"success": true,
	"result": [
		{
			"domain": "GLOBAL.FIS",
			"id": 167,
			"name": "Application167",
			"owneruser": "admin",
			"parentid": 0,
			"predecessorid": 0,
			"summary": ""
		}
	]
}

  /dmadminweb/API/server/{identifier}:
    # This is a HTTP operation
    get:
      summary: Retrieve specific server
      # Describe this verb here. Note: you can use markdown
      description: |
        This call returns a JSON object representing the specified server.

      # This is array of GET operation parameters:
      parameters:
        - name: identifier
          in: path
          description: Is the identifier of the server. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/server_result'
          examples:
            application/json:
              {
          "success": true,
	        "result": {
					"automd5": true,
					"autoping": true,
					"basedir": "/tmp",
					"comptypes": [
						"Application File"
					],
					"credential": "LDAP",
					"domain": "Openmake",
					"environments": [
						{
						"domain": "GLOBAL",
						"id": 2,
						"name": "tempenv"
						}
					],
					"hostname": "",
					"id": 84,
					"md5template": "DeployFailure",
					"name": "serverfromui",
					"owneruser": "fisadmin",
					"pingend": "03:30",
					"pingstart": "01:15",
					"pingtemplate": "DeploySuccess",
					"protocol": "sftp",
					"summary": ""
		}
}
 
  /dmadminweb/API/component/{identifier}:
    # This is a HTTP operation
    get:
      # Describe this verb here. Note: you can use markdown
      summary: Retrieve specific component or component version
      description: |
        This call returns a JSON object representing the specified component. It is useful to determine the application(s) which include the component, whether the application(s) are approved, which other components are used in applications alongside the specified component and so on.
      # This is array of GET operation parameters:
      parameters:
        - name: latest
          in: query
          description: If latest is set to Y then the latest version of the component is returned.  To use this flag, the specified identifier must refer to a BASE component, otherwise the flag has no effect.
          required: false
          type: string
        - name: branch
          in: query
          description: If branch is set along with latest then the latest version on the specified branch name is returned.
          required: true
          type: string
        - name: identifier
          in: path
          description: Is the identifier of the component. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/component_version_result'
          examples:
            application/json:
              {
	"success": true,
	"result": {
		"branch": "",
		"domain": "FIS.Test",
		"id": 221,
		"lastbuild": 155,
		"name": "tcomp123",
		"owneruser": "fisadmin",
				"requests": [
					{
					"apiurl": "https://...",
					"htmlurl": "https://...",
					"id": "TS-1",
					"status": "To Do",
					"title": "Here is a description of a change"
			}
		],
		"summary": "",
		"versions": [
			{
				"id": 222,
				"name": "tcomp123;1",
				"summary": ""
			}
		],
		"applications": [
			{
				"approvals": [
					{
						"domain": "Test",
						"note": "",
						"timestamp": 1455801949,
						"user": "tester1"
					}
				],
				"rejections": [
				],
				"branch": "",
				"components": [
					{
						"id": 54,
						"name": "FrameworkComponent",
						"summary": ""
					}
				],
						"domain": "GLOBAL.FIS",
				"id": 161,
				"name": "FISApp",
				"owneruser": "admin",
						"requests": [
							{
								"apiurl": "https://....",
								"htmlurl": "https://....",
								"id": "140",
								"status": "closed",
								"title": "Creation Rights Missing"
							}
				],
				"summary": "Base Application for FIS",
				"versions": [
				]
			}
		]
	}
}


  /dmadminweb/API/calendar:
    # This is a HTTP operation
    get:
      # Describe this verb here. Note: you can use markdown
      summary: Retrieve calendar events
      description: |
        This call returns a JSON object representing the events in the calendar(s). Events can be filtered based on the environment to which the calendar belongs, the application associated with the event, a date/time range or a combination of all of these.
      # This is array of GET operation parameters:
      parameters:
        - name: env
          in: query
          description: Is the identifier of an environment. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID. Specifying the environment filters the results to those events associated with the given environment
          required: false
          type: string
        - name: app
          in: query
          description: Is the identifier of an application. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID. Specifying the application filters the results to those events associated with the given application..
          required: false
          type: string
        - name: starttime
          in: query
          description: |-
            Is a date/time which - if specified - restricts the result to only include events which start on or before the specified time. If endtime is not provided, the API returns all future events.
            
            YYYY:MM:DD	A date (4 digit year, a 2 digit month number and a 2 digit day of month).
            
            YYYY:MM:DD:hh:mm	A date and time (4 digit year, a 2 digit month number, a 2 digit day of month and then the hours and minutes).
            
            nnnnnnnnnn	An integer number representing the number of seconds since midnight, 1st Jan 1970 (Epoch time)
          required: false
          type: string
        - name: endtime
          in: query
          description: |-
            Is a date/time which - if specified - restricts the result to only include events which start on or after the specified time. If starttime is not provided, the API only returns events that in the future. Specifying a starttime before the current date/time will return historical events
            
            YYYY:MM:DD	A date (4 digit year, a 2 digit month number and a 2 digit day of month).
            
            YYYY:MM:DD:hh:mm	A date and time (4 digit year, a 2 digit month number, a 2 digit day of month and then the hours and minutes).
            
            nnnnnnnnnn	An integer number representing the number of seconds since midnight, 1st Jan 1970 (Epoch time)
          required: false
          type: string          
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/calendar_event_result'
          examples:
            application/json:
              {
	"success": true,
	"result": [
		{
			"allday": false,
			"application": {
				"id": 220,
				"name": "ITGuys;1"
			},
			"created": {
				"datetime": "2016:03:07:16:11",
				"timestamp": 1457367105
			},
			"creator": {
				"id": 626,
				"name": "fisadmin"
			},
			"deployid": 0,
			"desc": "testing",
			"endtime": {
				"datetime": "2016:03:09:08:00",
				"timestamp": 1457510400
			},
			"environment": {
				"id": 19,
				"name": "ProdEnv1"
			},
			"id": 164,
			"pending": true,
			"starttime": {
				"datetime": "2016:03:09:07:00",
				"timestamp": 1457506800
			},
			"title": "t1",
			"type": "Reserved"
		}
	]	
}
  /dmadminweb/API/deploy/{app_id}/{env_id}:
    # This is a HTTP operation
    get:
      # Describe this verb here. Note: you can use markdown
      summary: Start Deployment
      description: |
        This call starts a deployment of the specified application into the specified environment.
        
        In order for API deployments to work through the DeployHub permission model, there has to be a Deploy task either in the domain in which the specified application is located or in any of the parent domains if the Deploy task is set to be available to sub-domains. If finer control is required, the task can be named via the task parameter. 

        This mechanism ensures that the invoking user has permission to deploy the application (since the permissions are checked against the task). Also, by specifying the task to execute, any pre and post link actions are executed just as if the task had been invoked via the Web UI.
        
        Note - Any additional parameters are created as Global Variables accessible in DeployHub with a url_ prefix. For example, if you passed "myparam=123" as a parameter in the "deploy" api call, it would be available as $url_myparam in DeployHub.
      # This is array of GET operation parameters:
      parameters:
        - name: wait
          in: query
          description: |
              If the wait parameter is not specified - or is specified and set to Y - then the call does not return until the deployment is complete. If the wait parameter is set to N then the call returns as soon as the deployment has been instigated but before it completes. In both cases, the deployment id is returned.
          required: false
          type: string
        - name: task
          in: query
          description: | 
              Is the identifier of a Deploy task to execute in order to perform the deployment. Either its name, its qualified name (i.e. with its domain and any parent domain(s) included in dot notation) or its internal ID. If the task is not specified, the first accessible Deploy task within the application's domain is used (or any Deploy task in parent domains if they are set to be available to sub-domains).
          required: false
          type: string
        - name: app_id
          in: path
          description: Is the identifier of an application. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID. 
          required: true
          type: string
        - name: env_id
          in: path
          description: Is the identifier of an environment. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string          
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/deployment_result'
          examples:
            application/json:
              {
	"success": true,
	"deploymentid": 1713
}
		        
  /dmadminweb/API/log/{lognumber}:
    # This is a HTTP operation
    get:
      summary: Retrieve specific server
      # Describe this verb here. Note: you can use markdown
      description: |
        This call returns a JSON object representing the specified deployment log.

      # This is array of GET operation parameters:
      parameters:
        - name: lognumber
          in: path
          description: Is the deployment ID being retrieved. Note if the deployment log relates to an application outside of your domain hierarchy or to an application to which you do not have read access then you will receive an error.
          required: true
          type: integer
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/log_result'
          examples:
            application/json:
              {
	"success": true,
			"application": "ITGuys;2",
			"complete": true,
			"environment": "TestEnv1",
			"exitcode": 0,
			"exitstatus": "Finished",
			"started": 1455826432,
			"finished": 1455826436,
			"id": 1709,
			"loglinecount": 30,
			"logoutput": [
				"INFO: Starting deployment #1709",
				"INFO: Time taken 3.744000 seconds"
			]
}	        
		
  /dmadminweb/API/new/appver/{app_id}:
    # This is a HTTP operation
    get:
      summary: Create New Application Version
      # Describe this verb here. Note: you can use markdown
      description: |
          This call creates a new version of an application. The new application inherits all the attributes of the predecessor application. In order for this to work through the DeployHub permission model, there has to be a Create Version task either in the domain in which the specified application is located or in any of the parent domains if the Create Version task is set to be available to sub-domains. If finer control is required, the task can be named via the task parameter. 

          This mechanism ensures that the invoking user has permission to create a new version of the application (since the permissions are checked against the task) and also the target domain (i.e. the domain in which the new application is created) is determined from the task. Also, by specifying the task to execute, any pre and post link actions are executed just as if the task had been invoked via the Web UI.

      # This is array of GET operation parameters:
      parameters:
        - name: app_id
          in: path
          description: Is the ID of the application which will be the parent of the new application version. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID. The newly created application version will inherit all the attributes from this application.
          required: true
          type: integer
        - name: task
          in: query
          description: Is the identifier of a task to execute in order to create the new application version. Either its name, its qualified name (i.e. with its domain and any parent domain(s) included in dot notation) or its internal ID. If the task is not specified, the first accessible Create Version task within the application's domain is used (or any Create Version task in parent domains if they are set to be available to sub-domains).
          required: false
          type: string    
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
}
       
  /dmadminweb/API/new/compver/{comp_id}:
    # This is a HTTP operation
    get:
      summary: Create New Application Version
      # Describe this verb here. Note: you can use markdown
      description: |
          This call creates a new version of a component. The new component inherits all the attributes of the predecessor component including its domain.

      # This is array of GET operation parameters:
      parameters:
        - name: comp_id
          in: path
          description: Is the ID of the component which will be the parent of the new component version. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID. The newly created component version will inherit all the attributes from this component.
          required: true
          type: integer
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
}
   
  /dmadminweb/API/new/replace/{app_id}/{old_comp_id}/{new_comp_id}:
    # This is a HTTP operation
    get:
      summary: Create New Application Version
      # Describe this verb here. Note: you can use markdown
      description: |
          This call creates a new version of a component. The new component inherits all the attributes of the predecessor component including its domain.

      # This is array of GET operation parameters:
      parameters:
        - name: app_id
          in: path
          description: Is the ID of the application with which old_comp_id is  associated. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID. 
          required: true
          type: integer
        - name: old_comp_id
          in: path
          description: Is the ID of the component in app_id which is to be replaced. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: integer
        - name: new_comp_id
          in: path
          description: Is the ID of the component which will replace old_comp_id in the application identified by app_id. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: integer          
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
}
   
  /dmadminweb/API/buildid/{comp_id}/{build_id}:
    # This is a HTTP operation
    get:
      summary: Associate a Build with a Component
      # Describe this verb here. Note: you can use markdown
      description: |
          This call associates a build number with a specified component. It is typically used from build engines to notify DeployHub that a new build has been performed. If the component is associated with an approved application then a new version of the component and application is created automatically and the new component version replaces the old component version in the newly created application version.

          In order for this to work through the DeployHub permission model, the associated "Create Application Version" task needs to be specified. This ensures that the invoking user has permission to create a new version of the application (since the permissions are checked against the named task) and also the target domain (i.e. the domain in which the new application is created) is determined from the task. Also, by specifying the task to execute, any pre and post link actions are executed just as if the task had been invoked via the Web UI.

      # This is array of GET operation parameters:
      parameters:
        - name: comp_id
          in: path
          description: Is the ID of a BASE component. DeployHub will find the latest version of this component and associate the build with that component version. If branch is specified then the latest version on the branch is located. The component can be specified using either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID. 
          required: true
          type: integer
        - name: build_id
          in: path
          description: Is the numeric build ID to associate with the latest version of comp_id. 
          required: true
          type: integer
        - name: taskname
          in: query
          description: Is the identifier of a Create New Application task to execute in order to create the new application version. Either its name, its qualified name (i.e. with its domain and any parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string         
        - name: commit
          in: query
          description: Is the commit ID which triggered the build.
          required: false
          type: string 
        - name: issue
          in: query
          description: Is a change request id to associate with this build. If you add an issue then the specified component must have an associated change request datasource associated with it. This is because DeployHub will query the change tracking tool in order to retrieve the description of the change and the current status. If the component does not have such a datasource an error is returned.  You can specify one or more issue parameters if you need to associate multiple change requests with this build or use the issues parameter to specify multiple change requests.
          required: false
          type: string   
        - name: issues
          in: query
          description: Is a comma-separated list of change request ids. This is equivalent to specifying multiple issue parameters.
          required: false
          type: string    
        - name: file
          in: query
          description: Is a filename to record against the build. This is typically a file that was changed that resulted in a build being performed. You can specify one or more file parameters if you need to associate multiple files with this build or use the files parameter to specify multiple files.
          required: false
          type: string              
        - name: files
          in: query
          description: Is a comma-separated list of files. This is equivalent to specifying multiple file parameters.
          type: string            
          
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 

  /dmadminweb/API/approve/{app_id}:
    # This is a HTTP operation
    get:
      summary: Approving an Application
      # Describe this verb here. Note: you can use markdown
      description: |
          This call allows the API to approve/reject an application for a specified domain.
          In order for this to work through the DeployHub permission model, there has to be a Approve task either in the domain in which the specified application is located or in any of the parent domains if the Approve task is set to be available to sub-domains. If finer control is required, the task can be named via the task parameter. 

          This mechanism ensures that the invoking user has permission to approve the application (since the permissions are checked against the named task) and also the target domain (i.e. the domain to which the application is being approved/rejected) is determined from the task. Also, by specifying the task to execute, any pre and post link actions are executed just as if the task had been invoked via the Web UI.

      # This is array of GET operation parameters:
      parameters:
        - name: app_id
          in: path
          description: Is the identifier of the application to be approved/rejected. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: integer
        - name: task
          in: query
          description: Is the identifier of a task to execute in order to approve the application. Either its name, its qualified name (i.e. with its domain and any parent domain(s) included in dot notation) or its internal ID. If the task is not specified, the first accessible Approve task within the application's domain is used (or any Approve task in parent domains if they are set to be available to sub-domains). 
          required: false
          type: string         
        - name: approve
          in: query
          description: Is optional. If specified and set to N then the application is rejected. If this parameter is not specified or is set to Y then the application is approved.
          required: false
          type: string 
        - name: notes
          in: query
          description: Any free-text notes that should be associated with the approval/rejection.
          required: false
          type: string   
          
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 
 
  /dmadminweb/API/assign/server/{server_id}/{env_id}:
    # This is a HTTP operation
    get:
      summary: Assign a Server to an Environment
      # Describe this verb here. Note: you can use markdown
      description: |
          This call allows an existing server to be associated with an existing environment. Once the server is associated with an environment it can receive components during a deployment.
          
          Servers can be associated with more than one environment. Assigning a server to an environment will not disassociate the server from any other environment with which it may be already associated. To move a server between environments you must use the API/server/unassign call to remove the server from the original environment - see next section for more information.

      # This is array of GET operation parameters:
      parameters:
        - name: server_id
          in: path
          description: Is the identifier of the server to be assigned. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: integer
        - name: env_id
          in: path
          description: Is the identifier of the environment to which the server should be assigned. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string         

      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 

  /dmadminweb/API/unassign/server/{server_id}/{env_id}:
    # This is a HTTP operation
    get:
      summary: Unassign a Server to an Environment
      # Describe this verb here. Note: you can use markdown
      description: |
          This call disassociates a server from an environment. When the server is disassociated from the environment then any subsequent deployments to that environment will not result in any files or operations being directed at the server.
          
          This call does not delete the server - it simply disassociates it from the environment. To delete a server use the API/del/server call.

      # This is array of GET operation parameters:
      parameters:
        - name: server_id
          in: path
          description: Is the identifier of the server to be assigned. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: integer
        - name: env_id
          in: path
          description: Is the identifier of the environment to which the server should be assigned. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string         

      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 

  /dmadminweb/API/assign/application/{app_id}/{env_id}:
    # This is a HTTP operation
    get:
      summary: Assign a Application to an Environment
      # Describe this verb here. Note: you can use markdown
      description: |
          This call assigns an existing application to an environment. This association allows the application (or any of its versions) to be deployed to that environment. An application needs to be assigned to an environment before it can be deployed to that environment.

      # This is array of GET operation parameters:
      parameters:
        - name: app_id
          in: path
          description: Is the identifier of the application to be assigned. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: integer
        - name: env_id
          in: path
          description: Is the identifier of the environment to which the server should be assigned. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string         

      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 

  /dmadminweb/API/unassign/application/{app_id}/{env_id}:
    # This is a HTTP operation
    get:
      summary: Unassign a Application to an Environment
      # Describe this verb here. Note: you can use markdown
      description: |
          This call disassociates an application from an environment. Once the application has been disassociated from the environment neither it nor any of its versions can be deployed to that environment.
          
          Disassociating an application from an environment does not physically remove the application from the environment. It simply prevents DeployHub from deploying any version of the application to the environment.

      # This is array of GET operation parameters:
      parameters:
        - name: app_id
          in: path
          description: Is the identifier of the application to be assigned. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: integer
        - name: env_id
          in: path
          description: Is the identifier of the environment to which the server should be assigned. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string         

      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 

  /dmadminweb/API/assign/user/{user_id}/{group_id}:
    # This is a HTTP operation
    get:
      summary: Associate a User with a User Group
      # Describe this verb here. Note: you can use markdown
      description: |
          This call assigns an existing user to a User Group. Once a user has been assigned to the group then the user will have access to any object to which the User Group has been granted appropriate access.
      # This is array of GET operation parameters:
      parameters:
        - name: user_id
          in: path
          description: Is the identifier of the user to be assigned. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: integer
        - name: group_id
          in: path
          description: Is the identifier of the User Group to which the user should be assigned. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string         

      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 

  /dmadminweb/API/unassign/user/{user_id}/{group_id}:
    # This is a HTTP operation
    get:
      summary: Disassociate a User from a User Group
      # Describe this verb here. Note: you can use markdown
      description: |
          This call disassociates a user from a User Group. Once a user has been removed from the group they no longer have access to any object to which access has been granted through the User Group.
      # This is array of GET operation parameters:
      parameters:
        - name: user_id
          in: path
          description: Is the identifier of the user to be assigned. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: integer
        - name: group_id
          in: path
          description: Is the identifier of the User Group to which the user should be assigned. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string         

      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 

  /dmadminweb/API/new/credential/{cred_id}:
    # This is a HTTP operation
    get:
      summary: Create a New Credential
      # Describe this verb here. Note: you can use markdown
      description: |
          This call creates a new credential. All of the attributes of the new credential are set through parameters to the API.
          
          If "domain" is not specified then the environment is created in the logged in user's home domain.
      # This is array of GET operation parameters:
      parameters:
        - name: cred_id
          in: path
          description: Is the name of the credential to be created.
          required: true
          type: string
        - name: domain
          in: query
          description: Is the identifier of the domain in which the credential is to be created. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string         
        - name: summary
          in: query
          description: Is the summary text for the credential.
          required: false
          type: string
        - name: kind
          in: query
          description: |
                The type of credential to create. Must be one of - 
                    encrypted	The username and password are held encrypted in the DeployHub database.
                    vars	The username and password contain variable names to be expanded when the credential is used. Held unencrypted in the database.
                    ppk	Public/Private Key file.
                    dfo	DFO filename for use with Harvest.
          required: false
          type: string  
        - name: username
          in: query
          description: Required for credentials of kind encrypted, vars or ppk. The username to be stored against the credential.
          required: false
          type: string  
        - name: password
          in: query
          description: Required for credentials of kind encrypted and vars. The password to be stored against the credential.
          required: false
          type: string    
        - name: keyfile
          in: query
          description: Required for credentials of kind ppk. The path of the private keyfile to be used by the credential.
          required: false
          type: string    
        - name: filename
          in: query
          description: Required for credentials of kind dfo. The path of the Harvest DFO file containing the encrypted username/password.
          required: false
          type: string         
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 

  /dmadminweb/API/mod/credential/{cred_id}:
    # This is a HTTP operation
    get:
      summary: Modify a Credential
      # Describe this verb here. Note: you can use markdown
      description: |
          This call modifies an existing credential. The attributes of the credential are modified through parameters to the API.
          
          It is not possible to modify the credential's kind (encrypted, vars, dfo or ppk) once it has been created. If you need to change the kind of the credential you must delete it and recreate it.
      # This is array of GET operation parameters:
      parameters:
        - name: cred_id
          in: path
          description: Is the ID of the credential to be modified. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string
        - name: domain
          in: query
          description: Is the identifier of the domain in which the credential is to be created. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string         
        - name: summary
          in: query
          description: Is the summary text for the credential.
          required: false
          type: string
        - name: kind
          in: query
          description: |
                The type of credential to create. Must be one of - 
                    encrypted	The username and password are held encrypted in the DeployHub database.
                    vars	The username and password contain variable names to be expanded when the credential is used. Held unencrypted in the database.
                    ppk	Public/Private Key file.
                    dfo	DFO filename for use with Harvest.
          required: false
          type: string  
        - name: username
          in: query
          description: Required for credentials of kind encrypted, vars or ppk. The username to be stored against the credential.
          required: false
          type: string  
        - name: password
          in: query
          description: Required for credentials of kind encrypted and vars. The password to be stored against the credential.
          required: false
          type: string    
        - name: keyfile
          in: query
          description: Required for credentials of kind ppk. The path of the private keyfile to be used by the credential.
          required: false
          type: string    
        - name: filename
          in: query
          description: Required for credentials of kind dfo. The path of the Harvest DFO file containing the encrypted username/password.
          required: false
          type: string         
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 

  /dmadminweb/API/del/credential/{cred_id}:
    # This is a HTTP operation
    get:
      summary: Deleting a Credential
      # Describe this verb here. Note: you can use markdown
      description: |
          This call deletes a credential. 
      # This is array of GET operation parameters:
      parameters:
        - name: cred_id
          in: path
          description: Is the ID of the credential to be deleted. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
}

  /dmadminweb/API/new/environment/{env_id}:
    # This is a HTTP operation
    get:
      summary: Create a New Environment
      # Describe this verb here. Note: you can use markdown
      description: |
          This call creates a new environment. All of the attributes of the new environment are set through parameters to the API.
          
          If "domain" is not specified then the environment is created in the logged in user's home domain.
      # This is array of GET operation parameters:
      parameters:
        - name: env_id
          in: path
          description: Is the name of the environment to be created.
          required: true
          type: string
        - name: domain
          in: query
          description: Is the identifier of the domain in which the credential is to be created. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string         
        - name: summary
          in: query
          description: Is the summary text for the credential.
          required: false
          type: string
      
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 

  /dmadminweb/API/mod/environment/{env_id}:
    # This is a HTTP operation
    get:
      summary: Modifying a Environment
      # Describe this verb here. Note: you can use markdown
      description: |
          This call modifies an existing environment. The attributes of the environment are modified through parameters to the API.
      # This is array of GET operation parameters:
      parameters:
        - name: env_id
          in: path
          description: Is the ID of the environment to be modified. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string
        - name: domain
          in: query
          description: Is the identifier of the domain in which the credential is to be created. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string         
        - name: summary
          in: query
          description: Is the summary text for the credential.
          required: false
          type: string
      
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
}

  /dmadminweb/API/del/environment/{env_id}:
    # This is a HTTP operation
    get:
      summary: Deleting a Environment
      # Describe this verb here. Note: you can use markdown
      description: |
          This call deletes an environment. 
      # This is array of GET operation parameters:
      parameters:
        - name: env_id
          in: path
          description: Is the ID of the environment to be deleted. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string

      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
}

  /dmadminweb/API/new/server/{server_id}:
    # This is a HTTP operation
    get:
      summary: Create a New Server
      # Describe this verb here. Note: you can use markdown
      description: |
          This call creates a new server. All of the attributes of the new server are set through parameters to the API.
          
          If "domain" is not specified then the server is created in the logged in user's home domain.
      # This is array of GET operation parameters:
      parameters:
        - name: server_id
          in: path
          description: Is the name of the server to be created.
          required: true
          type: string
        - name: domain
          in: query
          description: Is the identifier of the domain in which the credential is to be created. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string         
        - name: env
          in: query
          description: Is the identifier of the environment to which the server should be allocated after creation. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID. If this parameter is not specified, the server is not allocated to any environment.
          required: false
          type: string
        - name: type
          in: query
          description: |
                The server type. i.e. Windows, Unix, AS400 etc.
          required: false
          type: string  
        - name: hostname
          in: query
          description: The server's hostname.
          required: false
          type: string  
        - name: protocol
          in: query
          description: The transport protocol used to deploy to this server. One of ftp, ftps, sftp or win.
          required: false
          type: string    
        - name: basedir
          in: query
          description: The base directory for this server.
          required: false
          type: string    
        - name: credname
          in: query
          description: The name of the credential user to connect to this server.
          required: false
          type: string 
        - name: autoping
          in: query
          description: Y or N. Whether auto ping is enabled.
          required: false
          type: string 
        - name: automd5
          in: query
          description: Y or N. Whether auto MD5 checks are enabled.
          required: false
          type: string   
        - name: comptype
          in: query
          description: A CSV list of component types that this server will accept.
          required: false
          type: string 
        - name: pinginterval
          in: query
          description: The ping interval. Value from 15 - 240 in 15 minute increments. Ignored if "autoping" is N or not specified.
          required: false
          type: string    
        - name: pingstart
          in: query
          description: The start time for autoping in HH:MM format. Ignored if "autoping" is N or not specified.
          required: false
          type: string   
        - name: pingend
          in: query
          description: The end time for autoping in HH:MM format. Ignored if "autoping" is N or not specified.
          required: false
          type: string    
        - name: pingtemplate
          in: query
          description: The ping template to use if the server stops responding to ping or other parts of the connection test. Ignored if "autoping" is N or not specified.
          required: false
          type: string     
        - name: md5template
          in: query
          description: The MD5 template to use if any of the previously deployed files have different MD5 sums to those calculated at deployment time. Ignored if "automd5" is N or not specified.
          required: false
          type: string 
        - name: sshport
          in: query
          description: The port number for SSH connections if protocol is SFTP.
          required: false
          type: string          
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 
  
  /dmadminweb/API/mod/server/{server_id}:
    # This is a HTTP operation
    get:
      summary: Modifying a New Server
      # Describe this verb here. Note: you can use markdown
      description: |
          This call modifies an existing server. The attributes of the server are modified through parameters to the API.
      # This is array of GET operation parameters:
      parameters:
        - name: server_id
          in: path
          description: Is the ID of the server to be modified. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string
        - name: domain
          in: query
          description: Is the identifier of the domain in which the credential is to be created. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string         
        - name: env
          in: query
          description: Is the identifier of the environment to which the server should be allocated after creation. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID. If this parameter is not specified, the server is not allocated to any environment.
          required: false
          type: string
        - name: type
          in: query
          description: |
                The server type. i.e. Windows, Unix, AS400 etc.
          required: false
          type: string  
        - name: hostname
          in: query
          description: The server's hostname.
          required: false
          type: string  
        - name: protocol
          in: query
          description: The transport protocol used to deploy to this server. One of ftp, ftps, sftp or win.
          required: false
          type: string    
        - name: basedir
          in: query
          description: The base directory for this server.
          required: false
          type: string    
        - name: credname
          in: query
          description: The name of the credential user to connect to this server.
          required: false
          type: string 
        - name: autoping
          in: query
          description: Y or N. Whether auto ping is enabled.
          required: false
          type: string 
        - name: automd5
          in: query
          description: Y or N. Whether auto MD5 checks are enabled.
          required: false
          type: string   
        - name: comptype
          in: query
          description: A CSV list of component types that this server will accept.
          required: false
          type: string 
        - name: pinginterval
          in: query
          description: The ping interval. Value from 15 - 240 in 15 minute increments. Ignored if "autoping" is N or not specified.
          required: false
          type: string    
        - name: pingstart
          in: query
          description: The start time for autoping in HH:MM format. Ignored if "autoping" is N or not specified.
          required: false
          type: string   
        - name: pingend
          in: query
          description: The end time for autoping in HH:MM format. Ignored if "autoping" is N or not specified.
          required: false
          type: string    
        - name: pingtemplate
          in: query
          description: The ping template to use if the server stops responding to ping or other parts of the connection test. Ignored if "autoping" is N or not specified.
          required: false
          type: string     
        - name: md5template
          in: query
          description: The MD5 template to use if any of the previously deployed files have different MD5 sums to those calculated at deployment time. Ignored if "automd5" is N or not specified.
          required: false
          type: string 
        - name: sshport
          in: query
          description: The port number for SSH connections if protocol is SFTP.
          required: false
          type: string          
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 

  /dmadminweb/API/del/server/{server_id}:
    # This is a HTTP operation
    get:
      summary: Deleting a Server
      # Describe this verb here. Note: you can use markdown
      description: |
          This call deletes a server. The server is removed from any associated environment and deleted from DeployHub.
          
          You would typically use this call in combination with "Clone" in order to dynamically add and remove servers from an environment pre and post deployment. See the "clone" command later in this document for more information on cloning servers.
          
      # This is array of GET operation parameters:
      parameters:
        - name: server_id
          in: path
          description: Is the ID of the server to be deleted. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 

  /dmadminweb/API/new/user/{user_id}:
    # This is a HTTP operation
    get:
      summary: Create a New User
      # Describe this verb here. Note: you can use markdown
      description: |
          This call creates a new user. All of the attributes of the new user are set through parameters to the API.
          
          If "domain" is not specified then the server is created in the logged in user's home domain.
      # This is array of GET operation parameters:
      parameters:
        - name: user_id
          in: path
          description: Is the name of the user to be created.
          required: true
          type: string
        - name: domain
          in: query
          description: Is the identifier of the domain in which the credential is to be created. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string         
        - name: realname
          in: query
          description: Is the user's real (or full) name
          required: false
          type: string
        - name: ldap
          in: query
          description: Is the user's real (or full) name
          required: false
          type: string  
        - name: cpw
          in: query
          description: Is the Change Password flag (should be Y or N). If present and set to Y, the user will be required to change their password when they next login (unless password authentication is being handled by LDAP).
          required: false
          type: string  
        - name: tel
          in: query
          description: Is the user's telephone number
          required: false
          type: string    
        - name: email
          in: query
          description: Is the user's email address.
          required: false
          type: string    
        - name: pw
          in: query
          description: Is the user's password (ignored if authentication is being done with LDAP)
          required: false
          type: string 
        - name: locked
          in: query
          description: Is the "Account Locked" flag (should be Y or N). If present and set to Y, the user account is "locked" and login is not possible
          required: false
          type: string 
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 

  /dmadminweb/API/mod/user/{user_id}:
    # This is a HTTP operation
    get:
      summary: Modifying a User
      # Describe this verb here. Note: you can use markdown
      description: |
          This call modifies an existing user. The attributes of the user are modified through parameters to the API.
      # This is array of GET operation parameters:
      parameters:
        - name: user_id
          in: path
          description: Is the ID of the user to be modified. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string
        - name: domain
          in: query
          description: Is the identifier of the domain in which the credential is to be created. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string         
        - name: realname
          in: query
          description: Is the user's real (or full) name
          required: false
          type: string
        - name: ldap
          in: query
          description: Is the user's real (or full) name
          required: false
          type: string  
        - name: cpw
          in: query
          description: Is the Change Password flag (should be Y or N). If present and set to Y, the user will be required to change their password when they next login (unless password authentication is being handled by LDAP).
          required: false
          type: string  
        - name: tel
          in: query
          description: Is the user's telephone number
          required: false
          type: string    
        - name: email
          in: query
          description: Is the user's email address.
          required: false
          type: string    
        - name: pw
          in: query
          description: Is the user's password (ignored if authentication is being done with LDAP)
          required: false
          type: string 
        - name: locked
          in: query
          description: Is the "Account Locked" flag (should be Y or N). If present and set to Y, the user account is "locked" and login is not possible
          required: false
          type: string 
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 

  /dmadminweb/API/del/user/{user_id}:
    # This is a HTTP operation
    get:
      summary: Deleting a User
      # Describe this verb here. Note: you can use markdown
      description: |
          This call deletes a user. The server is removed from any associated user group and deleted from DeployHub.
      # This is array of GET operation parameters:
      parameters:
        - name: user_id
          in: path
          description: Is the identifier of the server whose attributes are to be changed. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 

  /dmadminweb/API/setvar/server/{server_id}:
    # This is a HTTP operation
    get:
      summary: Set Server Attribute
      # Describe this verb here. Note: you can use markdown
      description: |
          This call sets or creates an attribute for the specified server. If the attribute does not exist it is created. If the attribute already exists, its value is changed to the specified value.
      # This is array of GET operation parameters:
      parameters:
        - name: server_id
          in: path
          description: Is the identifier of the server whose attributes are to be changed. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 

  /dmadminweb/API/setvar/environment/{env_id}:
    # This is a HTTP operation
    get:
      summary: Set Environment Attribute
      # Describe this verb here. Note: you can use markdown
      description: |
          This call sets or creates an attribute for the specified environment. If the attribute does not exist it is created. If the attribute already exists, its value is changed to the specified value.
      # This is array of GET operation parameters:
      parameters:
        - name: env_id
          in: path
          description: Is the identifier of the environment whose attributes are to be changed. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 


  /dmadminweb/API/setvar/application/{app_id}:
    # This is a HTTP operation
    get:
      summary: Set Application Attribute
      # Describe this verb here. Note: you can use markdown
      description: |
          This call sets or creates an attribute for the specified application. If the attribute does not exist it is created. If the attribute already exists, its value is changed to the specified value.
      # This is array of GET operation parameters:
      parameters:
        - name: app_id
          in: path
          description: Is the identifier of the application whose attributes are to be changed. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 

  /dmadminweb/API/setvar/component/{comp_id}:
    # This is a HTTP operation
    get:
      summary: Set Component Attribute
      # Describe this verb here. Note: you can use markdown
      description: |
          This call sets or creates an attribute for the specified component. If the attribute does not exist it is created. If the attribute already exists, its value is changed to the specified value.
      # This is array of GET operation parameters:
      parameters:
        - name: comp_id
          in: path
          description: Is the identifier of the component whose attributes are to be changed. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 


  /dmadminweb/API/getvar/server/{server_id}:
    # This is a HTTP operation
    get:
      summary: SGt Server Attribute
      # Describe this verb here. Note: you can use markdown
      description: |
          This call retrieves the attributes for the specified server. If the name parameter is specified then only the named attribute is returned, otherwise all the attributes for the specified server are returned.
      parameters:
        - name: server_id
          in: path
          description: Is the identifier of the server whose attributes are to be changed. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string
        - name: attname
          in: query
          description: Is the name of the attribute to be retrieved. If the name parameter is omitted, all attributes are returned.
          required: false
          type: string          
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/attribute_result'
          examples:
            application/json:
                {
	"success": true,
	"attributes": [{
		"DATABASE": "postgres"
	}, {
		"DB_PASSWORD": "postgres"
	}, {
		"DB_USERNAME": "postgres"
	}, {
		"POSTGRES_HOME": "C:\\Program Files\\PostgreSQL\\9.3"
	}]
}

  /dmadminweb/API/getvar/environment/{env_id}:
    # This is a HTTP operation
    get:
      summary: Get Environment Attribute
      # Describe this verb here. Note: you can use markdown
      description: |
          This call retrieves the attributes for the specified environment. If the name parameter is specified then only the named attribute is returned, otherwise all the attributes for the specified environment are returned.
      # This is array of GET operation parameters:
      parameters:
        - name: env_id
          in: path
          description: Is the identifier of the environment whose attributes are to be changed. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string
        - name: attname
          in: query
          description: Is the name of the attribute to be retrieved. If the name parameter is omitted, all attributes are returned.
          required: false
          type: string            
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/attribute_result'
          examples:
            application/json:
                {
	"success": true,
	"attributes": [{
		"DATABASE": "postgres"
	}, {
		"DB_PASSWORD": "postgres"
	}, {
		"DB_USERNAME": "postgres"
	}, {
		"POSTGRES_HOME": "C:\\Program Files\\PostgreSQL\\9.3"
	}]
}


  /dmadminweb/API/getvar/application/{app_id}:
    # This is a HTTP operation
    get:
      summary: Get Application Attribute
      # Describe this verb here. Note: you can use markdown
      description: |
          This call retrieves the attributes for the specified application. If the name parameter is specified then only the named attribute is returned, otherwise all the attributes for the specified application are returned.
      # This is array of GET operation parameters:
      parameters:
        - name: app_id
          in: path
          description: Is the identifier of the application whose attributes are to be changed. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string
        - name: attname
          in: query
          description: Is the name of the attribute to be retrieved. If the name parameter is omitted, all attributes are returned.
          required: false
          type: string           
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/attribute_result'
          examples:
            application/json:
                {
	"success": true,
	"attributes": [{
		"DATABASE": "postgres"
	}, {
		"DB_PASSWORD": "postgres"
	}, {
		"DB_USERNAME": "postgres"
	}, {
		"POSTGRES_HOME": "C:\\Program Files\\PostgreSQL\\9.3"
	}]
}

  /dmadminweb/API/getvar/component/{comp_id}:
    # This is a HTTP operation
    get:
      summary: Get Component Attribute
      # Describe this verb here. Note: you can use markdown
      description: |
          This call retrieves the attributes for the specified component. If the name parameter is specified then only the named attribute is returned, otherwise all the attributes for the specified component are returned.
      # This is array of GET operation parameters:
      parameters:
        - name: comp_id
          in: path
          description: Is the identifier of the component whose attributes are to be changed. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string
        - name: attname
          in: query
          description: Is the name of the attribute to be retrieved. If the name parameter is omitted, all attributes are returned.
          required: false
          type: string         
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/attribute_result'
          examples:
            application/json:
                {
	"success": true,
	"attributes": [{
		"DATABASE": "postgres"
	}, {
		"DB_PASSWORD": "postgres"
	}, {
		"DB_USERNAME": "postgres"
	}, {
		"POSTGRES_HOME": "C:\\Program Files\\PostgreSQL\\9.3"
	}]
}

  /dmadminweb/API/clone/server/{server_id}/{newname}:
    # This is a HTTP operation
    get:
      summary: Clone a Server
      # Describe this verb here. Note: you can use markdown
      description: |
          This call creates a copy of the server. The server is duplicated in its entirety, including its hostname, its base directory and the component types it will accept. 
          
          If you are cloning the server to create a collection of similar servers then you will probably need to make further "mod" API calls to change the hostname and other server-specific attributes. See "Modifying a Server" above for more information.
      # This is array of GET operation parameters:
      parameters:
        - name: server_id
          in: path
          description: Is the identifier of the server to be cloned. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string
        - name: newname
          in: path
          description: The name of the new (cloned) server.
          required: true
          type: string          
        - name: domain
          in: query
          description: If specified this is the identifier of the Domain where the server should be created (either its name, its qualified name or its id). If the domain is not specified then the cloned server is created in the same domain as the server being cloned.
          required: false
          type: string         
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 


  /dmadminweb/API/clone/environment/{env_id}/{newname}:
    # This is a HTTP operation
    get:
      summary: Clone an Environment
      # Describe this verb here. Note: you can use markdown
      description: |
          This call creates a copy of an environment. The environment is duplicated in its entirety, including all its servers. Each server in the environment is also cloned and created in the same domain as the newly cloned environment.

          If you are cloning the environment then you may need to make further "mod" calls to change the hostnames and other server specific attributes for the member servers.

      # This is array of GET operation parameters:
      parameters:
        - name: env_id
          in: path
          description: Is the identifier of the environment to be cloned. Either its name, its qualified name (i.e. with its parent domain(s) included in dot notation) or its internal ID.
          required: true
          type: string
        - name: newname
          in: path
          description: The name of the new (cloned) environment.
          required: true
          type: string          
        - name: domain
          in: query
          description: If specified this is the identifier of the Domain where the environment should be created (either its name, its qualified name or its id). If the domain is not specified then the cloned environment is created in the same domain as the environment being cloned. Any servers that were cloned as a result of being associated with the cloned environment are also created in this domain.
          required: false
          type: string         
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description:
             Success or failure.  Check success field for status.
          schema:
            $ref: '#/definitions/success'
          examples:
            application/json:
              {
	success: true
} 


definitions:
  success:
    type: object
    description: value is true for a successful result, false for unsuccessful result
    required:
      - success
    properties:
      success:
        type: boolean
      error: 
        type: string 
        
  application:
     type: object
     properties:
      completed: 
        type: string
        description: The date/time of the last deployment of this application into the environment.
      deploymentid: 
        type: integer
        description: The ID of the last deployment of this application into the environment. An ID of 0 indicates that the application has been manually associated with the environment.
      exitcode: 
        type: integer
        description: The exit code of the last deployment of this application into the environment.
      id: 
        type: integer
        description: The internal object ID of the BASE application.
      name: 
        type: string
        description: The name of the BASE application.
      predecessorid: 
        type: integer
        description: The ID of the previous application version if the application is a version.
      versionid:
        type: integer
        description: The ID of the application version if the application is a version.
      versionname:
        type: string
        description: The name of the application version if the application is a version.
        
  applications:
    type: array
    items:
        $ref: '#/definitions/application'
        
  environment:
    type: object
    properties:
      domain:
        type: string
        description: The fully-qualified domain name of the domain in which the environment is located.
      id: 
        type: integer
        description: Is the internal ID of the environment
      name: 
        type: string
        description: Is the name of the environment
      owneruser: 
        type: string
        description: If the "owner" of the environment is a user, then this is the name of the user
      ownergroup: 
        type: string
        description: If the "owner" of the environment is a user group, then this is the name of that group.
      summary: 
        type: string
        description: The summary string associated with the environment.
      applications:
        $ref: '#/definitions/applications'

  environments:
    type: array
    items:
        $ref: '#/definitions/environment'  
        
  environments_result:
    type: object
    properties:
      success:
        type: boolean
        description: Is true or false depending on the success or failure of the query. If success is false then result is not returned and a text field named "error" is returned instead.
      result:
        description: Is a JSON  array of objects, one for each environment returned by the query (if success is true).
        type: array
        items:
          $ref: '#/definitions/environments'
          
  environment_result:
    type: object
    properties:
      success:
        type: boolean
        description: Is true or false depending on the success or failure of the query. If success is false then result is not returned and a text field named "error" is returned instead.
      result:
        $ref: '#/definitions/environment'  
        
  applications_result:
    type: object
    properties:
      success:
        type: boolean
        description: Is true or false depending on the success or failure of the query. If success is false then result is not returned and a text field named "error" is returned instead.
      result:
        description: Is a JSON  array of objects, one for each environment returned by the query (if success is true).
        type: array
        items:
          $ref: '#/definitions/applications'
          
  request:
    type: object
    properties:
      title:
        type: string
        description: Is the description of the change request
      id: 
        type: integer
        description: Is the ID of the change request as known by the external change tracking system.
      status: 
        type: string
        description: Is the status of the change request.
      api_url: 
        type: string
        description: Is the URL of the API call to the external change tracking system that is required to return more data about the specified change request.
      html_url: 
        type: string
        description: Is the URL of the page in the external change tracking system which details more information about the change request. 

  application_version:
    type: object
    properties:
      id: 
        type: integer
        description: Is the internal application ID
      name: 
        type: string
        description: Is the name of the application version
      summary: 
        type: string
        description: Is the summary text associated with the application version

  application_predecessor:
    type: object
    description: Only returned for application versions. A JSON Object representing the predecessor of this application (if the application is a version). 
    properties:
      id: 
        type: integer
        description: Is the internal application ID
      name: 
        type: string
        description: Is the name of the predecessor application
      summary: 
        type: string
        description: Is the summary text associated with the predecessor application
      versions:
        type: array
        items:
          $ref: "#/definitions/application_version"
   
  component:
    type: object
    properties:
      id: 
        type: integer
        description: Is the component's internal ID
      lastbuild:
        type: integer
        description: Is the last build number associated with this component (0 if never built or no associated build job)
      name: 
        type: string
        description: Is the name of the Component
      summary: 
        type: string
        description: Is the summary text associated with the Component
      domain:
        type: string
        description: The fully-qualified domain name of the domain in which the application is located.
      application_id:  
        type: string
        description: Is the internal ID of the application
      application_name:  
        type: string
        description: Is the name of the application
      owneruser:
        type: string
        description: If the "owner" of the application is a user, then this is the name of the useron      
      ownergroup:
        type: string
        description: If the "owner" of the application is a user group, then this is the name of that group.     
      predecessor:
        $ref: "#/definitions/application_predecessor"
   
        
  approval:
    type: object
    properties:
      domain: 
        type: string
        description: Domain that approval was made in
      note: 
        type: string
        description: Comments about the approval
      timestamp: 
        type: integer
        description: When the approval was preformed
      user:
        type: string
        description: Userid that did the approval
        
  rejection:
    type: object
    properties:
      domain: 
        type: string
        description: Domain that rejection was made in
      note: 
        type: string
        description: Comments about the rejection
      timestamp: 
        type: integer
        description: When the rejection was preformed
      user:
        type: string
        description: Userid that did the rejection
        
  application_version_full:
     type: object
     description: Is a JSON  object representing the application being retrieved.
     properties:
        approvals:
          type: array
          items:
            $ref: "#/definitions/approval"
        rejections:
          type: array
          items:
            $ref: "#/definitions/rejection"
        summary:
          type: string
          description: Is the summary text associated with the application            
        branch:
          type: string
          description: Is the name of the branch on which this application is located (if an application version. If no branch is specified, this string is zero length.
        components:
          type: array
          items:
            $ref: "#/definitions/component"        
        requests:
          type: array
          items:
            $ref: "#/definitions/request"   
        application_versions:
          type: array
          items:
            $ref: "#/definitions/application_version"              
        
  application_version_result:
    type: object
    properties:
      success:
        type: boolean
        description: Is true or false depending on the success or failure of the query. If success is false then result is not returned and a text field named "error" is returned instead.
      result:
        $ref: '#/definitions/application_version_full'
  
  server:
     type: object
     properties:
      automd5: 
        type: string
        description: Is a Boolean representing if "Auto MD5 Scanning" is set for the server.
      autoping: 
        type: string
        description: Is a Boolean representing if "Auto Ping" is set for the server.
      basedir: 
        type: string
        description: Is the base directory for the server.
      comptypes:
          type: array
          items:
            $ref: "#/definitions/comptype"   
      credential: 
        type: string
        description: Is the name of the credential used to connect to the server.
      domain: 
        type: string
        description: Is the server's fully qualified domain.
      environments:
          type: array
          items:
            $ref: "#/definitions/environment"    
      hostname: 
        type: string
        description: Is the hostname of the server   
      id: 
        type: string
        description: Is the server's internal object ID.  
      md5template: 
        type: string
        description: Is the name of the template to be used for notification should the server fail an automated mD5 scan. 
      name: 
        type: string
        description: Is the server's name. 
      owneruser: 
        type: string
        description: If the "owner" of the server is a user, then this is the name of the user
      ownergroup: 
        type: string
        description: If the "owner" of the server is a user group, then this is the name of that group.         
      pingend: 
        type: string
        description: The time after which auto ping will stop (in format HH:MM) 
      pingstart: 
        type: string
        description: The time at which auto ping will start (in format HH:MM) 
      pingtemplate: 
        type: string
        description: Is the name of the template to be used for notification should the server fail an automated ping.
      protocol: 
        type: string
        description: The protocol used to connect to the server.
      summary: 
        type: string
        description: Any summary text associated with the server.
        
  comptype:
    type: string
    description: component type used by components and servers
    
  servers:
    type: array
    items:
        $ref: '#/definitions/server'          
        
  servers_result:
    type: object
    properties:
      success:
        type: boolean
        description: Is true or false depending on the success or failure of the query. If success is false then result is not returned and a text field named "error" is returned instead.
      result:
        $ref: '#/definitions/servers'   
        
  server_result:
    type: object
    properties:
      success:
        type: boolean
        description: Is true or false depending on the success or failure of the query. If success is false then result is not returned and a text field named "error" is returned instead.
      result:
        $ref: '#/definitions/server'          
        
  component_version:
    type: object
    properties:
      id: 
        type: integer
        description: Is the internal application ID
      name: 
        type: string
        description: Is the name of the application version
      summary: 
        type: string
        description: Is the summary text associated with the application version

  component_predecessor:
    type: object
    description: Only returned for application versions. A JSON Object representing the predecessor of this application (if the application is a version). 
    properties:
      id: 
        type: integer
        description: Is the internal application ID
      name: 
        type: string
        description: Is the name of the predecessor application
      summary: 
        type: string
        description: Is the summary text associated with the predecessor application
      versions:
        type: array
        items:
          $ref: "#/definitions/component_version"   
          
  component_version_result:
    type: object
    properties:
      success:
        type: boolean
        description: Is true or false depending on the success or failure of the query. If success is false then result is not returned and a text field named "error" is returned instead.
      result:
        $ref: '#/definitions/component_version_full'    
        
  component_version_full:
     type: object
     description: Is a JSON  object representing the application being retrieved.
     properties:
        branch:
          type: string
          description: Is the name of the branch on which this component is located (if a component version). If no branch is specified, this string is zero length.
        domain:
          type: string
          description: The fully-qualified domain name of the domain in which the component is located.  
        id:
          type: integer
          description: The internal id of the component or component version  
        lastbuild:
          type: integer
          description: Last Build number that created the component or component version
        name:
          type: string
          description: The name of the component or component version 
        owneruser: 
          type: string
          description: If the "owner" of the server is a user, then this is the name of the user
        ownergroup: 
          type: string
          description: If the "owner" of the server is a user group, then this is the name of that group.             
        requests:
          type: array
          items:
            $ref: "#/definitions/request"  
        summary: 
          type: string
          description: Is the summary text associated with the component version            
        component_versions:
          type: array
          items:
            $ref: "#/definitions/component_version"   
        applications:
          type: array
          items:
            $ref: "#/definitions/application_version_full" 
        predecessor:    
          type: array
          items:
            $ref: "#/definitions/component_predecessor"   
            
  event_timestamp:
    type: object
    description: datetime and epoc
    properties:
      datetime: 
        type: string
        description: is the date/time in YYYY:MM:DD:hh:mm format  
      timestamp : 
        type: integer
        description: is the date/time in Epoch Time.
 
  event_creator:
    type: object
    description: Is an object representing the user who created the event
    properties:
      id: 
        type: integer
        description: is the internal user id  
      name: 
        type: string
        description: is the name of the user.

  event_environment:
    type: object
    description: Is an object representing the user who created the event
    properties:
      id: 
        type: integer
        description: is the internal environment ID
      name: 
        type: string
        description: is the environment name.
        
  event:
    type: object
    description: Calendar Event
    properties:
      allday: 
        type: boolean
        description: Is a Boolean indicating whether the event is an "all day" event.
      application: 
        $ref: "#/definitions/application" 
      created: 
        $ref: "#/definitions/event_timestamp" 
      creator: 
        $ref: "#/definitions/event_creator" 
      endtime: 
        $ref: "#/definitions/event_timestamp" 
      deployid:
        type: integer
        description: Is the ID of the deployment (if this is a deployment record), 0 otherwise.
      desc: 
        type: string
        description: Is the Description of the event.       
      environment: 
        $ref: "#/definitions/event_environment" 
      id: 
        type: integer
        description: Is the internal event id.  
      pending: 
        type: boolean
        description: Is a Boolean indicating whether the event is awaiting approval by the environment owner.     
      starttime: 
        $ref: "#/definitions/event_timestamp" 
      title: 
        type: string
        description: Is the event title. 
      type: 
        type: string
        description: Is the event type.  
        
  calendar_event_result:
    type: object
    properties:
      success:
        type: boolean
        description: Is true or false depending on the success or failure of the query. If success is false then result is not returned and a text field named "error" is returned instead.
      result:
        type: array
        items:
          $ref: '#/definitions/event'      
          
  deployment_result:
     properties:
      success:
        type: boolean
        description: Is true or false depending on the success or failure of the query. If success is false then result is not returned and a text field named "error" is returned instead.
      deploymentid:
        type: integer
        description: Deployment Id     
        
  log:
     type: object
     description: Deployment Log
     properties:
        application:
          type: string
          description: The name of the application that was deployed.
        complete:  
          type: boolean
          description: A Boolean indicating if the deployment is complete (true) or still in progress (false). 
        environment:
          type: string
          description: The environment to which the application was deployed. 
        exitcode:
          type: integer
          description: The exit code of the deployment.
        exitstatus:
          type: string
          description: The error text if the deployment failed. 
        started: 
          type: integer
          description: The start date/time of the deployment (in Epoch time)
        finished: 
          type: integer
          description: The end date/time of the deployment (in Epoch time)        
        id: 
          type: integer
          description: The deployment ID. 
        loglinecount: 
          type: integer
          description: The number of lines in the "logoutput" array
        logoutput: 
          type: array
          items:
            type: string
            description: An array of strings, each representing a line of the deployment log.
            
  log_result:
    type: object
    properties:
      success:
        type: boolean
        description: Is true or false depending on the success or failure of the query. If success is false then result is not returned and a text field named "error" is returned instead.
      result:
        $ref: '#/definitions/log'     
  
  attribute:
    type: object
    properties:
      attrname:
        type: string
        description: name of the attribute key
      attrvalue:
        type: string
        description: value for the attribute
        
  attribute_result:
    type: object
    properties:
      success:
        type: boolean
        description: Is true or false depending on the success or failure of the query. If success is false then result is not returned and a text field named "error" is returned instead.
      attributes:
        type: array
        items:
          $ref: '#/definitions/attribute'  
        